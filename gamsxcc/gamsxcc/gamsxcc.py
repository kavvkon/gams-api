# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

import _gamsxcc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gamsxcc.intArray_swiginit(self, _gamsxcc.new_intArray(nelements))
    __swig_destroy__ = _gamsxcc.delete_intArray

    def __getitem__(self, index):
        return _gamsxcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gamsxcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _gamsxcc.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gamsxcc.intArray_frompointer(t)

# Register intArray in _gamsxcc:
_gamsxcc.intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _gamsxcc.intArray_frompointer(t)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gamsxcc.doubleArray_swiginit(self, _gamsxcc.new_doubleArray(nelements))
    __swig_destroy__ = _gamsxcc.delete_doubleArray

    def __getitem__(self, index):
        return _gamsxcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gamsxcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _gamsxcc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gamsxcc.doubleArray_frompointer(t)

# Register doubleArray in _gamsxcc:
_gamsxcc.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _gamsxcc.doubleArray_frompointer(t)


def new_intp():
    return _gamsxcc.new_intp()

def copy_intp(value):
    return _gamsxcc.copy_intp(value)

def delete_intp(obj):
    return _gamsxcc.delete_intp(obj)

def intp_assign(obj, value):
    return _gamsxcc.intp_assign(obj, value)

def intp_value(obj):
    return _gamsxcc.intp_value(obj)

def new_doublep():
    return _gamsxcc.new_doublep()

def copy_doublep(value):
    return _gamsxcc.copy_doublep(value)

def delete_doublep(obj):
    return _gamsxcc.delete_doublep(obj)

def doublep_assign(obj, value):
    return _gamsxcc.doublep_assign(obj, value)

def doublep_value(obj):
    return _gamsxcc.doublep_value(obj)

def new_gamsxHandle_tp():
    return _gamsxcc.new_gamsxHandle_tp()

def copy_gamsxHandle_tp(value):
    return _gamsxcc.copy_gamsxHandle_tp(value)

def delete_gamsxHandle_tp(obj):
    return _gamsxcc.delete_gamsxHandle_tp(obj)

def gamsxHandle_tp_assign(obj, value):
    return _gamsxcc.gamsxHandle_tp_assign(obj, value)

def gamsxHandle_tp_value(obj):
    return _gamsxcc.gamsxHandle_tp_value(obj)

def new_TBrkPCallBack1_tp():
    return _gamsxcc.new_TBrkPCallBack1_tp()

def copy_TBrkPCallBack1_tp(value):
    return _gamsxcc.copy_TBrkPCallBack1_tp(value)

def delete_TBrkPCallBack1_tp(obj):
    return _gamsxcc.delete_TBrkPCallBack1_tp(obj)

def TBrkPCallBack1_tp_assign(obj, value):
    return _gamsxcc.TBrkPCallBack1_tp_assign(obj, value)

def TBrkPCallBack1_tp_value(obj):
    return _gamsxcc.TBrkPCallBack1_tp_value(obj)

def new_TBrkPCallBack2_tp():
    return _gamsxcc.new_TBrkPCallBack2_tp()

def copy_TBrkPCallBack2_tp(value):
    return _gamsxcc.copy_TBrkPCallBack2_tp(value)

def delete_TBrkPCallBack2_tp(obj):
    return _gamsxcc.delete_TBrkPCallBack2_tp(obj)

def TBrkPCallBack2_tp_assign(obj, value):
    return _gamsxcc.TBrkPCallBack2_tp_assign(obj, value)

def TBrkPCallBack2_tp_value(obj):
    return _gamsxcc.TBrkPCallBack2_tp_value(obj)

def gamsxHandleToPtr(pgamsx):
    r"""gamsxHandleToPtr(pgamsx) -> void *"""
    return _gamsxcc.gamsxHandleToPtr(pgamsx)

def ptrTogamsxHandle(vptr):
    r"""ptrTogamsxHandle(vptr) -> gamsxHandle_t"""
    return _gamsxcc.ptrTogamsxHandle(vptr)

def gamsxGetReady(msgBufSize):
    r"""gamsxGetReady(msgBufSize) -> int"""
    return _gamsxcc.gamsxGetReady(msgBufSize)

def gamsxGetReadyD(dirName, msgBufSize):
    r"""gamsxGetReadyD(dirName, msgBufSize) -> int"""
    return _gamsxcc.gamsxGetReadyD(dirName, msgBufSize)

def gamsxGetReadyL(libName, msgBufSize):
    r"""gamsxGetReadyL(libName, msgBufSize) -> int"""
    return _gamsxcc.gamsxGetReadyL(libName, msgBufSize)

def gamsxCreate(pgamsx, msgBufSize):
    r"""gamsxCreate(pgamsx, msgBufSize) -> int"""
    return _gamsxcc.gamsxCreate(pgamsx, msgBufSize)

def gamsxCreateD(pgamsx, dirName, msgBufSize):
    r"""gamsxCreateD(pgamsx, dirName, msgBufSize) -> int"""
    return _gamsxcc.gamsxCreateD(pgamsx, dirName, msgBufSize)

def gamsxCreateL(pgamsx, libName, msgBufSize):
    r"""gamsxCreateL(pgamsx, libName, msgBufSize) -> int"""
    return _gamsxcc.gamsxCreateL(pgamsx, libName, msgBufSize)

def gamsxFree(pgamsx):
    r"""gamsxFree(pgamsx) -> int"""
    return _gamsxcc.gamsxFree(pgamsx)

def gamsxLibraryLoaded():
    r"""gamsxLibraryLoaded() -> int"""
    return _gamsxcc.gamsxLibraryLoaded()

def gamsxLibraryUnload():
    r"""gamsxLibraryUnload() -> int"""
    return _gamsxcc.gamsxLibraryUnload()

def gamsxGetScreenIndicator():
    r"""gamsxGetScreenIndicator() -> int"""
    return _gamsxcc.gamsxGetScreenIndicator()

def gamsxSetScreenIndicator(scrind):
    r"""gamsxSetScreenIndicator(scrind)"""
    return _gamsxcc.gamsxSetScreenIndicator(scrind)

def gamsxGetExceptionIndicator():
    r"""gamsxGetExceptionIndicator() -> int"""
    return _gamsxcc.gamsxGetExceptionIndicator()

def gamsxSetExceptionIndicator(excind):
    r"""gamsxSetExceptionIndicator(excind)"""
    return _gamsxcc.gamsxSetExceptionIndicator(excind)

def gamsxGetExitIndicator():
    r"""gamsxGetExitIndicator() -> int"""
    return _gamsxcc.gamsxGetExitIndicator()

def gamsxSetExitIndicator(extind):
    r"""gamsxSetExitIndicator(extind)"""
    return _gamsxcc.gamsxSetExitIndicator(extind)

def gamsxGetErrorCallback():
    r"""gamsxGetErrorCallback() -> gamsxErrorCallback_t"""
    return _gamsxcc.gamsxGetErrorCallback()

def gamsxSetErrorCallback(func):
    r"""gamsxSetErrorCallback(func)"""
    return _gamsxcc.gamsxSetErrorCallback(func)

def gamsxGetAPIErrorCount():
    r"""gamsxGetAPIErrorCount() -> int"""
    return _gamsxcc.gamsxGetAPIErrorCount()

def gamsxSetAPIErrorCount(ecnt):
    r"""gamsxSetAPIErrorCount(ecnt)"""
    return _gamsxcc.gamsxSetAPIErrorCount(ecnt)

def gamsxErrorHandling(msg):
    r"""gamsxErrorHandling(msg)"""
    return _gamsxcc.gamsxErrorHandling(msg)

def gamsxRunExecDLL(pgamsx, optPtr, sysDir, AVerbose):
    r"""gamsxRunExecDLL(pgamsx, optPtr, sysDir, AVerbose) -> int"""
    return _gamsxcc.gamsxRunExecDLL(pgamsx, optPtr, sysDir, AVerbose)

def gamsxShowError(pgamsx, fNameLog):
    r"""gamsxShowError(pgamsx, fNameLog) -> int"""
    return _gamsxcc.gamsxShowError(pgamsx, fNameLog)

def gamsxAddBreakPoint(pgamsx, fn, lineNr):
    r"""gamsxAddBreakPoint(pgamsx, fn, lineNr)"""
    return _gamsxcc.gamsxAddBreakPoint(pgamsx, fn, lineNr)

def gamsxClearBreakPoints(pgamsx):
    r"""gamsxClearBreakPoints(pgamsx)"""
    return _gamsxcc.gamsxClearBreakPoints(pgamsx)

def gamsxSystemInfo(pgamsx, arg2, arg3):
    r"""gamsxSystemInfo(pgamsx, arg2, arg3) -> int"""
    return _gamsxcc.gamsxSystemInfo(pgamsx, arg2, arg3)

def gamsxSymbolInfo(pgamsx, SyNr, arg3, arg4, arg5, arg6):
    r"""gamsxSymbolInfo(pgamsx, SyNr, arg3, arg4, arg5, arg6) -> int"""
    return _gamsxcc.gamsxSymbolInfo(pgamsx, SyNr, arg3, arg4, arg5, arg6)

def gamsxUelName(pgamsx, uel):
    r"""gamsxUelName(pgamsx, uel) -> char *"""
    return _gamsxcc.gamsxUelName(pgamsx, uel)

def gamsxFindSymbol(pgamsx, SyName):
    r"""gamsxFindSymbol(pgamsx, SyName) -> int"""
    return _gamsxcc.gamsxFindSymbol(pgamsx, SyName)

def gamsxDataReadRawStart(pgamsx, SyNr, INOUT):
    r"""gamsxDataReadRawStart(pgamsx, SyNr, INOUT) -> int"""
    return _gamsxcc.gamsxDataReadRawStart(pgamsx, SyNr, INOUT)

def gamsxDataReadRaw(pgamsx, INOUT):
    r"""gamsxDataReadRaw(pgamsx, INOUT) -> int"""
    return _gamsxcc.gamsxDataReadRaw(pgamsx, INOUT)

def gamsxDataReadDone(pgamsx):
    r"""gamsxDataReadDone(pgamsx) -> int"""
    return _gamsxcc.gamsxDataReadDone(pgamsx)

def gamsxDataWriteRawStart(pgamsx, SyNr, DoMerge):
    r"""gamsxDataWriteRawStart(pgamsx, SyNr, DoMerge) -> int"""
    return _gamsxcc.gamsxDataWriteRawStart(pgamsx, SyNr, DoMerge)

def gamsxDataWriteRaw(pgamsx, Elements, Vals):
    r"""gamsxDataWriteRaw(pgamsx, Elements, Vals) -> int"""
    return _gamsxcc.gamsxDataWriteRaw(pgamsx, Elements, Vals)

def gamsxDataWriteDone(pgamsx):
    r"""gamsxDataWriteDone(pgamsx) -> int"""
    return _gamsxcc.gamsxDataWriteDone(pgamsx)

def gamsxRegisterCB1(pgamsx, CB1, userMem):
    r"""gamsxRegisterCB1(pgamsx, CB1, userMem)"""
    return _gamsxcc.gamsxRegisterCB1(pgamsx, CB1, userMem)

def gamsxRegisterCB2(pgamsx, CB2, userMem1, userMem2):
    r"""gamsxRegisterCB2(pgamsx, CB2, userMem1, userMem2)"""
    return _gamsxcc.gamsxRegisterCB2(pgamsx, CB2, userMem1, userMem2)

def gamsxGetCB1(pgamsx):
    r"""gamsxGetCB1(pgamsx) -> TBrkPCallBack1_t"""
    return _gamsxcc.gamsxGetCB1(pgamsx)

def gamsxGetCB2(pgamsx):
    r"""gamsxGetCB2(pgamsx) -> TBrkPCallBack2_t"""
    return _gamsxcc.gamsxGetCB2(pgamsx)

def gamsxGetCB1UM(pgamsx):
    r"""gamsxGetCB1UM(pgamsx) -> void *"""
    return _gamsxcc.gamsxGetCB1UM(pgamsx)

def gamsxGetCB2UM1(pgamsx):
    r"""gamsxGetCB2UM1(pgamsx) -> void *"""
    return _gamsxcc.gamsxGetCB2UM1(pgamsx)

def gamsxGetCB2UM2(pgamsx):
    r"""gamsxGetCB2UM2(pgamsx) -> void *"""
    return _gamsxcc.gamsxGetCB2UM2(pgamsx)

def gamsxSWSet(pgamsx, x):
    r"""gamsxSWSet(pgamsx, x)"""
    return _gamsxcc.gamsxSWSet(pgamsx, x)

def gamsxStepThrough(pgamsx):
    r"""gamsxStepThrough(pgamsx) -> int"""
    return _gamsxcc.gamsxStepThrough(pgamsx)

def gamsxStepThroughSet(pgamsx, x):
    r"""gamsxStepThroughSet(pgamsx, x)"""
    return _gamsxcc.gamsxStepThroughSet(pgamsx, x)

def gamsxRunToEnd(pgamsx):
    r"""gamsxRunToEnd(pgamsx) -> int"""
    return _gamsxcc.gamsxRunToEnd(pgamsx)

def gamsxRunToEndSet(pgamsx, x):
    r"""gamsxRunToEndSet(pgamsx, x)"""
    return _gamsxcc.gamsxRunToEndSet(pgamsx, x)

def gamsxCB1Defined(pgamsx):
    r"""gamsxCB1Defined(pgamsx) -> int"""
    return _gamsxcc.gamsxCB1Defined(pgamsx)

def gamsxCB2Defined(pgamsx):
    r"""gamsxCB2Defined(pgamsx) -> int"""
    return _gamsxcc.gamsxCB2Defined(pgamsx)
GAMSVERSION = _gamsxcc.GAMSVERSION

GAMSMAJOR = _gamsxcc.GAMSMAJOR

GAMSMINOR = _gamsxcc.GAMSMINOR

GAMSGOLD = _gamsxcc.GAMSGOLD

GLOBAL_MAX_INDEX_DIM = _gamsxcc.GLOBAL_MAX_INDEX_DIM

GLOBAL_UEL_IDENT_SIZE = _gamsxcc.GLOBAL_UEL_IDENT_SIZE

ITERLIM_INFINITY = _gamsxcc.ITERLIM_INFINITY

RESLIM_INFINITY = _gamsxcc.RESLIM_INFINITY

GMS_MAX_SOLVERS = _gamsxcc.GMS_MAX_SOLVERS

GMS_MAX_INDEX_DIM = _gamsxcc.GMS_MAX_INDEX_DIM

GMS_UEL_IDENT_SIZE = _gamsxcc.GMS_UEL_IDENT_SIZE

GMS_SSSIZE = _gamsxcc.GMS_SSSIZE

GMS_VARTYPE_UNKNOWN = _gamsxcc.GMS_VARTYPE_UNKNOWN

GMS_VARTYPE_BINARY = _gamsxcc.GMS_VARTYPE_BINARY

GMS_VARTYPE_INTEGER = _gamsxcc.GMS_VARTYPE_INTEGER

GMS_VARTYPE_POSITIVE = _gamsxcc.GMS_VARTYPE_POSITIVE

GMS_VARTYPE_NEGATIVE = _gamsxcc.GMS_VARTYPE_NEGATIVE

GMS_VARTYPE_FREE = _gamsxcc.GMS_VARTYPE_FREE

GMS_VARTYPE_SOS1 = _gamsxcc.GMS_VARTYPE_SOS1

GMS_VARTYPE_SOS2 = _gamsxcc.GMS_VARTYPE_SOS2

GMS_VARTYPE_SEMICONT = _gamsxcc.GMS_VARTYPE_SEMICONT

GMS_VARTYPE_SEMIINT = _gamsxcc.GMS_VARTYPE_SEMIINT

GMS_VARTYPE_MAX = _gamsxcc.GMS_VARTYPE_MAX

GMS_EQU_USERINFO_BASE = _gamsxcc.GMS_EQU_USERINFO_BASE

GMS_EQUTYPE_E = _gamsxcc.GMS_EQUTYPE_E

GMS_EQUTYPE_G = _gamsxcc.GMS_EQUTYPE_G

GMS_EQUTYPE_L = _gamsxcc.GMS_EQUTYPE_L

GMS_EQUTYPE_N = _gamsxcc.GMS_EQUTYPE_N

GMS_EQUTYPE_X = _gamsxcc.GMS_EQUTYPE_X

GMS_EQUTYPE_C = _gamsxcc.GMS_EQUTYPE_C

GMS_EQUTYPE_B = _gamsxcc.GMS_EQUTYPE_B

GMS_EQUTYPE_MAX = _gamsxcc.GMS_EQUTYPE_MAX

GMS_EQUEOFFSET = _gamsxcc.GMS_EQUEOFFSET

GMS_SETTYPE_DEFAULT = _gamsxcc.GMS_SETTYPE_DEFAULT

GMS_SETTYPE_SINGLETON = _gamsxcc.GMS_SETTYPE_SINGLETON

GMS_SETTYPE_MAX = _gamsxcc.GMS_SETTYPE_MAX

GMS_VAL_LEVEL = _gamsxcc.GMS_VAL_LEVEL

GMS_VAL_MARGINAL = _gamsxcc.GMS_VAL_MARGINAL

GMS_VAL_LOWER = _gamsxcc.GMS_VAL_LOWER

GMS_VAL_UPPER = _gamsxcc.GMS_VAL_UPPER

GMS_VAL_SCALE = _gamsxcc.GMS_VAL_SCALE

GMS_VAL_MAX = _gamsxcc.GMS_VAL_MAX

sv_valund = _gamsxcc.sv_valund

sv_valna = _gamsxcc.sv_valna

sv_valpin = _gamsxcc.sv_valpin

sv_valmin = _gamsxcc.sv_valmin

sv_valeps = _gamsxcc.sv_valeps

sv_normal = _gamsxcc.sv_normal

sv_acronym = _gamsxcc.sv_acronym

GMS_SVIDX_UNDEF = _gamsxcc.GMS_SVIDX_UNDEF

GMS_SVIDX_NA = _gamsxcc.GMS_SVIDX_NA

GMS_SVIDX_PINF = _gamsxcc.GMS_SVIDX_PINF

GMS_SVIDX_MINF = _gamsxcc.GMS_SVIDX_MINF

GMS_SVIDX_EPS = _gamsxcc.GMS_SVIDX_EPS

GMS_SVIDX_NORMAL = _gamsxcc.GMS_SVIDX_NORMAL

GMS_SVIDX_ACR = _gamsxcc.GMS_SVIDX_ACR

GMS_SVIDX_MAX = _gamsxcc.GMS_SVIDX_MAX

dt_set = _gamsxcc.dt_set

dt_par = _gamsxcc.dt_par

dt_var = _gamsxcc.dt_var

dt_equ = _gamsxcc.dt_equ

dt_alias = _gamsxcc.dt_alias

GMS_DT_SET = _gamsxcc.GMS_DT_SET

GMS_DT_PAR = _gamsxcc.GMS_DT_PAR

GMS_DT_VAR = _gamsxcc.GMS_DT_VAR

GMS_DT_EQU = _gamsxcc.GMS_DT_EQU

GMS_DT_ALIAS = _gamsxcc.GMS_DT_ALIAS

GMS_DT_MAX = _gamsxcc.GMS_DT_MAX

GMS_SV_UNDEF = _gamsxcc.GMS_SV_UNDEF

GMS_SV_NA = _gamsxcc.GMS_SV_NA

GMS_SV_PINF = _gamsxcc.GMS_SV_PINF

GMS_SV_MINF = _gamsxcc.GMS_SV_MINF

GMS_SV_EPS = _gamsxcc.GMS_SV_EPS

GMS_SV_ACR = _gamsxcc.GMS_SV_ACR

GMS_SV_NAINT = _gamsxcc.GMS_SV_NAINT

STAT_OK = _gamsxcc.STAT_OK

STAT_NOPT = _gamsxcc.STAT_NOPT

STAT_INFES = _gamsxcc.STAT_INFES

STAT_UNBND = _gamsxcc.STAT_UNBND

STAT_EVAL = _gamsxcc.STAT_EVAL

STAT_UNKNW = _gamsxcc.STAT_UNKNW

STAT_REDEF = _gamsxcc.STAT_REDEF

STAT_DEPND = _gamsxcc.STAT_DEPND

STAT_REDIR = _gamsxcc.STAT_REDIR

STAT_MAX = _gamsxcc.STAT_MAX

SS_MAX = _gamsxcc.SS_MAX

MS_MAX = _gamsxcc.MS_MAX


def gmsFixEquType(userInfo):
    r"""gmsFixEquType(userInfo) -> int"""
    return _gamsxcc.gmsFixEquType(userInfo)

def gmsFixVarType(userInfo):
    r"""gmsFixVarType(userInfo) -> int"""
    return _gamsxcc.gmsFixVarType(userInfo)

cvar = _gamsxcc.cvar
gmsDefRecVar = cvar.gmsDefRecVar
gmsDefRecEqu = cvar.gmsDefRecEqu
rcStat = cvar.rcStat
solveStatusTxt = cvar.solveStatusTxt
modelStatusTxt = cvar.modelStatusTxt

