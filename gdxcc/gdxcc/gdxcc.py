# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

import _gdxcc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gdxcc.intArray_swiginit(self, _gdxcc.new_intArray(nelements))
    __swig_destroy__ = _gdxcc.delete_intArray

    def __getitem__(self, index):
        return _gdxcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gdxcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _gdxcc.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gdxcc.intArray_frompointer(t)

# Register intArray in _gdxcc:
_gdxcc.intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _gdxcc.intArray_frompointer(t)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gdxcc.doubleArray_swiginit(self, _gdxcc.new_doubleArray(nelements))
    __swig_destroy__ = _gdxcc.delete_doubleArray

    def __getitem__(self, index):
        return _gdxcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gdxcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _gdxcc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gdxcc.doubleArray_frompointer(t)

# Register doubleArray in _gdxcc:
_gdxcc.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _gdxcc.doubleArray_frompointer(t)


def new_intp():
    return _gdxcc.new_intp()

def copy_intp(value):
    return _gdxcc.copy_intp(value)

def delete_intp(obj):
    return _gdxcc.delete_intp(obj)

def intp_assign(obj, value):
    return _gdxcc.intp_assign(obj, value)

def intp_value(obj):
    return _gdxcc.intp_value(obj)

def new_doublep():
    return _gdxcc.new_doublep()

def copy_doublep(value):
    return _gdxcc.copy_doublep(value)

def delete_doublep(obj):
    return _gdxcc.delete_doublep(obj)

def doublep_assign(obj, value):
    return _gdxcc.doublep_assign(obj, value)

def doublep_value(obj):
    return _gdxcc.doublep_value(obj)

def new_gdxHandle_tp():
    return _gdxcc.new_gdxHandle_tp()

def copy_gdxHandle_tp(value):
    return _gdxcc.copy_gdxHandle_tp(value)

def delete_gdxHandle_tp(obj):
    return _gdxcc.delete_gdxHandle_tp(obj)

def gdxHandle_tp_assign(obj, value):
    return _gdxcc.gdxHandle_tp_assign(obj, value)

def gdxHandle_tp_value(obj):
    return _gdxcc.gdxHandle_tp_value(obj)

def new_TDataStoreProc_tp():
    return _gdxcc.new_TDataStoreProc_tp()

def copy_TDataStoreProc_tp(value):
    return _gdxcc.copy_TDataStoreProc_tp(value)

def delete_TDataStoreProc_tp(obj):
    return _gdxcc.delete_TDataStoreProc_tp(obj)

def TDataStoreProc_tp_assign(obj, value):
    return _gdxcc.TDataStoreProc_tp_assign(obj, value)

def TDataStoreProc_tp_value(obj):
    return _gdxcc.TDataStoreProc_tp_value(obj)

def new_TDataStoreFiltProc_tp():
    return _gdxcc.new_TDataStoreFiltProc_tp()

def copy_TDataStoreFiltProc_tp(value):
    return _gdxcc.copy_TDataStoreFiltProc_tp(value)

def delete_TDataStoreFiltProc_tp(obj):
    return _gdxcc.delete_TDataStoreFiltProc_tp(obj)

def TDataStoreFiltProc_tp_assign(obj, value):
    return _gdxcc.TDataStoreFiltProc_tp_assign(obj, value)

def TDataStoreFiltProc_tp_value(obj):
    return _gdxcc.TDataStoreFiltProc_tp_value(obj)

def new_TDomainIndexProc_tp():
    return _gdxcc.new_TDomainIndexProc_tp()

def copy_TDomainIndexProc_tp(value):
    return _gdxcc.copy_TDomainIndexProc_tp(value)

def delete_TDomainIndexProc_tp(obj):
    return _gdxcc.delete_TDomainIndexProc_tp(obj)

def TDomainIndexProc_tp_assign(obj, value):
    return _gdxcc.TDomainIndexProc_tp_assign(obj, value)

def TDomainIndexProc_tp_value(obj):
    return _gdxcc.TDomainIndexProc_tp_value(obj)

def gdxHandleToPtr(pgdx):
    r"""gdxHandleToPtr(pgdx) -> void *"""
    return _gdxcc.gdxHandleToPtr(pgdx)

def ptrTogdxHandle(vptr):
    r"""ptrTogdxHandle(vptr) -> gdxHandle_t"""
    return _gdxcc.ptrTogdxHandle(vptr)

def gdxGetReady(msgBufSize):
    r"""gdxGetReady(msgBufSize) -> int"""
    return _gdxcc.gdxGetReady(msgBufSize)

def gdxGetReadyD(dirName, msgBufSize):
    r"""gdxGetReadyD(dirName, msgBufSize) -> int"""
    return _gdxcc.gdxGetReadyD(dirName, msgBufSize)

def gdxGetReadyL(libName, msgBufSize):
    r"""gdxGetReadyL(libName, msgBufSize) -> int"""
    return _gdxcc.gdxGetReadyL(libName, msgBufSize)

def gdxCreate(pgdx, msgBufSize):
    r"""gdxCreate(pgdx, msgBufSize) -> int"""
    return _gdxcc.gdxCreate(pgdx, msgBufSize)

def gdxCreateD(pgdx, dirName, msgBufSize):
    r"""gdxCreateD(pgdx, dirName, msgBufSize) -> int"""
    return _gdxcc.gdxCreateD(pgdx, dirName, msgBufSize)

def gdxCreateL(pgdx, libName, msgBufSize):
    r"""gdxCreateL(pgdx, libName, msgBufSize) -> int"""
    return _gdxcc.gdxCreateL(pgdx, libName, msgBufSize)

def gdxFree(pgdx):
    r"""gdxFree(pgdx) -> int"""
    return _gdxcc.gdxFree(pgdx)

def gdxLibraryLoaded():
    r"""gdxLibraryLoaded() -> int"""
    return _gdxcc.gdxLibraryLoaded()

def gdxLibraryUnload():
    r"""gdxLibraryUnload() -> int"""
    return _gdxcc.gdxLibraryUnload()

def gdxGetScreenIndicator():
    r"""gdxGetScreenIndicator() -> int"""
    return _gdxcc.gdxGetScreenIndicator()

def gdxSetScreenIndicator(scrind):
    r"""gdxSetScreenIndicator(scrind)"""
    return _gdxcc.gdxSetScreenIndicator(scrind)

def gdxGetExceptionIndicator():
    r"""gdxGetExceptionIndicator() -> int"""
    return _gdxcc.gdxGetExceptionIndicator()

def gdxSetExceptionIndicator(excind):
    r"""gdxSetExceptionIndicator(excind)"""
    return _gdxcc.gdxSetExceptionIndicator(excind)

def gdxGetExitIndicator():
    r"""gdxGetExitIndicator() -> int"""
    return _gdxcc.gdxGetExitIndicator()

def gdxSetExitIndicator(extind):
    r"""gdxSetExitIndicator(extind)"""
    return _gdxcc.gdxSetExitIndicator(extind)

def gdxGetErrorCallback():
    r"""gdxGetErrorCallback() -> gdxErrorCallback_t"""
    return _gdxcc.gdxGetErrorCallback()

def gdxSetErrorCallback(func):
    r"""gdxSetErrorCallback(func)"""
    return _gdxcc.gdxSetErrorCallback(func)

def gdxGetAPIErrorCount():
    r"""gdxGetAPIErrorCount() -> int"""
    return _gdxcc.gdxGetAPIErrorCount()

def gdxSetAPIErrorCount(ecnt):
    r"""gdxSetAPIErrorCount(ecnt)"""
    return _gdxcc.gdxSetAPIErrorCount(ecnt)

def gdxErrorHandling(msg):
    r"""gdxErrorHandling(msg)"""
    return _gdxcc.gdxErrorHandling(msg)

def gdxAcronymAdd(pgdx, AName, Txt, AIndx):
    r"""gdxAcronymAdd(pgdx, AName, Txt, AIndx) -> int"""
    return _gdxcc.gdxAcronymAdd(pgdx, AName, Txt, AIndx)

def gdxAcronymCount(pgdx):
    r"""gdxAcronymCount(pgdx) -> int"""
    return _gdxcc.gdxAcronymCount(pgdx)

def gdxAcronymGetInfo(pgdx, N):
    r"""gdxAcronymGetInfo(pgdx, N) -> int"""
    return _gdxcc.gdxAcronymGetInfo(pgdx, N)

def gdxAcronymGetMapping(pgdx, N):
    r"""gdxAcronymGetMapping(pgdx, N) -> int"""
    return _gdxcc.gdxAcronymGetMapping(pgdx, N)

def gdxAcronymIndex(pgdx, V):
    r"""gdxAcronymIndex(pgdx, V) -> int"""
    return _gdxcc.gdxAcronymIndex(pgdx, V)

def gdxAcronymName(pgdx, V):
    r"""gdxAcronymName(pgdx, V) -> int"""
    return _gdxcc.gdxAcronymName(pgdx, V)

def gdxAcronymNextNr(pgdx, NV):
    r"""gdxAcronymNextNr(pgdx, NV) -> int"""
    return _gdxcc.gdxAcronymNextNr(pgdx, NV)

def gdxAcronymSetInfo(pgdx, N, AName, Txt, AIndx):
    r"""gdxAcronymSetInfo(pgdx, N, AName, Txt, AIndx) -> int"""
    return _gdxcc.gdxAcronymSetInfo(pgdx, N, AName, Txt, AIndx)

def gdxAcronymValue(pgdx, AIndx):
    r"""gdxAcronymValue(pgdx, AIndx) -> double"""
    return _gdxcc.gdxAcronymValue(pgdx, AIndx)

def gdxAddAlias(pgdx, Id1, Id2):
    r"""gdxAddAlias(pgdx, Id1, Id2) -> int"""
    return _gdxcc.gdxAddAlias(pgdx, Id1, Id2)

def gdxAddSetText(pgdx, Txt):
    r"""gdxAddSetText(pgdx, Txt) -> int"""
    return _gdxcc.gdxAddSetText(pgdx, Txt)

def gdxAutoConvert(pgdx, NV):
    r"""gdxAutoConvert(pgdx, NV) -> int"""
    return _gdxcc.gdxAutoConvert(pgdx, NV)

def gdxClose(pgdx):
    r"""gdxClose(pgdx) -> int"""
    return _gdxcc.gdxClose(pgdx)

def gdxDataErrorCount(pgdx):
    r"""gdxDataErrorCount(pgdx) -> int"""
    return _gdxcc.gdxDataErrorCount(pgdx)

def gdxDataErrorRecord(pgdx, RecNr):
    r"""gdxDataErrorRecord(pgdx, RecNr) -> int"""
    return _gdxcc.gdxDataErrorRecord(pgdx, RecNr)

def gdxDataErrorRecordX(pgdx, RecNr):
    r"""gdxDataErrorRecordX(pgdx, RecNr) -> int"""
    return _gdxcc.gdxDataErrorRecordX(pgdx, RecNr)

def gdxDataReadDone(pgdx):
    r"""gdxDataReadDone(pgdx) -> int"""
    return _gdxcc.gdxDataReadDone(pgdx)

def gdxDataReadFilteredStart(pgdx, SyNr, FilterAction):
    r"""gdxDataReadFilteredStart(pgdx, SyNr, FilterAction) -> int"""
    return _gdxcc.gdxDataReadFilteredStart(pgdx, SyNr, FilterAction)

def gdxDataReadMap(pgdx, RecNr):
    r"""gdxDataReadMap(pgdx, RecNr) -> int"""
    return _gdxcc.gdxDataReadMap(pgdx, RecNr)

def gdxDataReadMapStart(pgdx, SyNr):
    r"""gdxDataReadMapStart(pgdx, SyNr) -> int"""
    return _gdxcc.gdxDataReadMapStart(pgdx, SyNr)

def gdxDataReadRaw(pgdx):
    r"""gdxDataReadRaw(pgdx) -> int"""
    return _gdxcc.gdxDataReadRaw(pgdx)

def gdxDataReadRawFast(pgdx, SyNr, DP):
    r"""gdxDataReadRawFast(pgdx, SyNr, DP) -> int"""
    return _gdxcc.gdxDataReadRawFast(pgdx, SyNr, DP)

def gdxDataReadRawFastFilt(pgdx, SyNr, UelFilterStr_in, DP):
    r"""gdxDataReadRawFastFilt(pgdx, SyNr, UelFilterStr_in, DP) -> int"""
    return _gdxcc.gdxDataReadRawFastFilt(pgdx, SyNr, UelFilterStr_in, DP)

def gdxDataReadRawStart(pgdx, SyNr):
    r"""gdxDataReadRawStart(pgdx, SyNr) -> int"""
    return _gdxcc.gdxDataReadRawStart(pgdx, SyNr)

def gdxDataReadSlice(pgdx, UelFilterStr_in, DP):
    r"""gdxDataReadSlice(pgdx, UelFilterStr_in, DP) -> int"""
    return _gdxcc.gdxDataReadSlice(pgdx, UelFilterStr_in, DP)

def gdxDataReadSliceStart(pgdx, SyNr):
    r"""gdxDataReadSliceStart(pgdx, SyNr) -> int"""
    return _gdxcc.gdxDataReadSliceStart(pgdx, SyNr)

def gdxDataReadStr(pgdx):
    r"""gdxDataReadStr(pgdx) -> int"""
    return _gdxcc.gdxDataReadStr(pgdx)

def gdxDataReadStrStart(pgdx, SyNr):
    r"""gdxDataReadStrStart(pgdx, SyNr) -> int"""
    return _gdxcc.gdxDataReadStrStart(pgdx, SyNr)

def gdxDataSliceUELS(pgdx, SliceKeyInt):
    r"""gdxDataSliceUELS(pgdx, SliceKeyInt) -> int"""
    return _gdxcc.gdxDataSliceUELS(pgdx, SliceKeyInt)

def gdxDataWriteDone(pgdx):
    r"""gdxDataWriteDone(pgdx) -> int"""
    return _gdxcc.gdxDataWriteDone(pgdx)

def gdxDataWriteMap(pgdx, KeyInt, Values):
    r"""gdxDataWriteMap(pgdx, KeyInt, Values) -> int"""
    return _gdxcc.gdxDataWriteMap(pgdx, KeyInt, Values)

def gdxDataWriteMapStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo):
    r"""gdxDataWriteMapStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo) -> int"""
    return _gdxcc.gdxDataWriteMapStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo)

def gdxDataWriteRaw(pgdx, KeyInt, Values):
    r"""gdxDataWriteRaw(pgdx, KeyInt, Values) -> int"""
    return _gdxcc.gdxDataWriteRaw(pgdx, KeyInt, Values)

def gdxDataWriteRawStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo):
    r"""gdxDataWriteRawStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo) -> int"""
    return _gdxcc.gdxDataWriteRawStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo)

def gdxDataWriteStr(pgdx, KeyStr_in, Values):
    r"""gdxDataWriteStr(pgdx, KeyStr_in, Values) -> int"""
    return _gdxcc.gdxDataWriteStr(pgdx, KeyStr_in, Values)

def gdxDataWriteStrStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo):
    r"""gdxDataWriteStrStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo) -> int"""
    return _gdxcc.gdxDataWriteStrStart(pgdx, SyId, ExplTxt, Dimen, Typ, UserInfo)

def gdxGetDLLVersion(pgdx):
    r"""gdxGetDLLVersion(pgdx) -> int"""
    return _gdxcc.gdxGetDLLVersion(pgdx)

def gdxErrorCount(pgdx):
    r"""gdxErrorCount(pgdx) -> int"""
    return _gdxcc.gdxErrorCount(pgdx)

def gdxErrorStr(pgdx, ErrNr):
    r"""gdxErrorStr(pgdx, ErrNr) -> int"""
    return _gdxcc.gdxErrorStr(pgdx, ErrNr)

def gdxFileInfo(pgdx):
    r"""gdxFileInfo(pgdx) -> int"""
    return _gdxcc.gdxFileInfo(pgdx)

def gdxFileVersion(pgdx):
    r"""gdxFileVersion(pgdx) -> int"""
    return _gdxcc.gdxFileVersion(pgdx)

def gdxFilterExists(pgdx, FilterNr):
    r"""gdxFilterExists(pgdx, FilterNr) -> int"""
    return _gdxcc.gdxFilterExists(pgdx, FilterNr)

def gdxFilterRegister(pgdx, UelMap):
    r"""gdxFilterRegister(pgdx, UelMap) -> int"""
    return _gdxcc.gdxFilterRegister(pgdx, UelMap)

def gdxFilterRegisterDone(pgdx):
    r"""gdxFilterRegisterDone(pgdx) -> int"""
    return _gdxcc.gdxFilterRegisterDone(pgdx)

def gdxFilterRegisterStart(pgdx, FilterNr):
    r"""gdxFilterRegisterStart(pgdx, FilterNr) -> int"""
    return _gdxcc.gdxFilterRegisterStart(pgdx, FilterNr)

def gdxFindSymbol(pgdx, SyId):
    r"""gdxFindSymbol(pgdx, SyId) -> int"""
    return _gdxcc.gdxFindSymbol(pgdx, SyId)

def gdxGetElemText(pgdx, TxtNr):
    r"""gdxGetElemText(pgdx, TxtNr) -> int"""
    return _gdxcc.gdxGetElemText(pgdx, TxtNr)

def gdxGetLastError(pgdx):
    r"""gdxGetLastError(pgdx) -> int"""
    return _gdxcc.gdxGetLastError(pgdx)

def gdxGetMemoryUsed(pgdx):
    r"""gdxGetMemoryUsed(pgdx) -> INT64"""
    return _gdxcc.gdxGetMemoryUsed(pgdx)

def gdxGetSpecialValues(pgdx, AVals):
    r"""gdxGetSpecialValues(pgdx, AVals) -> int"""
    return _gdxcc.gdxGetSpecialValues(pgdx, AVals)

def gdxGetUEL(pgdx, UelNr):
    r"""gdxGetUEL(pgdx, UelNr) -> int"""
    return _gdxcc.gdxGetUEL(pgdx, UelNr)

def gdxMapValue(pgdx, D):
    r"""gdxMapValue(pgdx, D) -> int"""
    return _gdxcc.gdxMapValue(pgdx, D)

def gdxOpenAppend(pgdx, FileName, Producer):
    r"""gdxOpenAppend(pgdx, FileName, Producer) -> int"""
    return _gdxcc.gdxOpenAppend(pgdx, FileName, Producer)

def gdxOpenRead(pgdx, FileName):
    r"""gdxOpenRead(pgdx, FileName) -> int"""
    return _gdxcc.gdxOpenRead(pgdx, FileName)

def gdxOpenReadEx(pgdx, FileName, ReadMode):
    r"""gdxOpenReadEx(pgdx, FileName, ReadMode) -> int"""
    return _gdxcc.gdxOpenReadEx(pgdx, FileName, ReadMode)

def gdxOpenWrite(pgdx, FileName, Producer):
    r"""gdxOpenWrite(pgdx, FileName, Producer) -> int"""
    return _gdxcc.gdxOpenWrite(pgdx, FileName, Producer)

def gdxOpenWriteEx(pgdx, FileName, Producer, Compr):
    r"""gdxOpenWriteEx(pgdx, FileName, Producer, Compr) -> int"""
    return _gdxcc.gdxOpenWriteEx(pgdx, FileName, Producer, Compr)

def gdxResetSpecialValues(pgdx):
    r"""gdxResetSpecialValues(pgdx) -> int"""
    return _gdxcc.gdxResetSpecialValues(pgdx)

def gdxSetHasText(pgdx, SyNr):
    r"""gdxSetHasText(pgdx, SyNr) -> int"""
    return _gdxcc.gdxSetHasText(pgdx, SyNr)

def gdxSetReadSpecialValues(pgdx, AVals):
    r"""gdxSetReadSpecialValues(pgdx, AVals) -> int"""
    return _gdxcc.gdxSetReadSpecialValues(pgdx, AVals)

def gdxSetSpecialValues(pgdx, AVals):
    r"""gdxSetSpecialValues(pgdx, AVals) -> int"""
    return _gdxcc.gdxSetSpecialValues(pgdx, AVals)

def gdxSetTextNodeNr(pgdx, TxtNr, Node):
    r"""gdxSetTextNodeNr(pgdx, TxtNr, Node) -> int"""
    return _gdxcc.gdxSetTextNodeNr(pgdx, TxtNr, Node)

def gdxSetTraceLevel(pgdx, N, s):
    r"""gdxSetTraceLevel(pgdx, N, s) -> int"""
    return _gdxcc.gdxSetTraceLevel(pgdx, N, s)

def gdxSymbIndxMaxLength(pgdx, SyNr):
    r"""gdxSymbIndxMaxLength(pgdx, SyNr) -> int"""
    return _gdxcc.gdxSymbIndxMaxLength(pgdx, SyNr)

def gdxSymbMaxLength(pgdx):
    r"""gdxSymbMaxLength(pgdx) -> int"""
    return _gdxcc.gdxSymbMaxLength(pgdx)

def gdxSymbolAddComment(pgdx, SyNr, Txt):
    r"""gdxSymbolAddComment(pgdx, SyNr, Txt) -> int"""
    return _gdxcc.gdxSymbolAddComment(pgdx, SyNr, Txt)

def gdxSymbolGetComment(pgdx, SyNr, N):
    r"""gdxSymbolGetComment(pgdx, SyNr, N) -> int"""
    return _gdxcc.gdxSymbolGetComment(pgdx, SyNr, N)

def gdxSymbolGetDomain(pgdx, SyNr):
    r"""gdxSymbolGetDomain(pgdx, SyNr) -> int"""
    return _gdxcc.gdxSymbolGetDomain(pgdx, SyNr)

def gdxSymbolGetDomainX(pgdx, SyNr):
    r"""gdxSymbolGetDomainX(pgdx, SyNr) -> int"""
    return _gdxcc.gdxSymbolGetDomainX(pgdx, SyNr)

def gdxSymbolDim(pgdx, SyNr):
    r"""gdxSymbolDim(pgdx, SyNr) -> int"""
    return _gdxcc.gdxSymbolDim(pgdx, SyNr)

def gdxSymbolInfo(pgdx, SyNr):
    r"""gdxSymbolInfo(pgdx, SyNr) -> int"""
    return _gdxcc.gdxSymbolInfo(pgdx, SyNr)

def gdxSymbolInfoX(pgdx, SyNr):
    r"""gdxSymbolInfoX(pgdx, SyNr) -> int"""
    return _gdxcc.gdxSymbolInfoX(pgdx, SyNr)

def gdxSymbolSetDomain(pgdx, DomainIDs_in):
    r"""gdxSymbolSetDomain(pgdx, DomainIDs_in) -> int"""
    return _gdxcc.gdxSymbolSetDomain(pgdx, DomainIDs_in)

def gdxSymbolSetDomainX(pgdx, SyNr, DomainIDs_in):
    r"""gdxSymbolSetDomainX(pgdx, SyNr, DomainIDs_in) -> int"""
    return _gdxcc.gdxSymbolSetDomainX(pgdx, SyNr, DomainIDs_in)

def gdxSystemInfo(pgdx):
    r"""gdxSystemInfo(pgdx) -> int"""
    return _gdxcc.gdxSystemInfo(pgdx)

def gdxUELMaxLength(pgdx):
    r"""gdxUELMaxLength(pgdx) -> int"""
    return _gdxcc.gdxUELMaxLength(pgdx)

def gdxUELRegisterDone(pgdx):
    r"""gdxUELRegisterDone(pgdx) -> int"""
    return _gdxcc.gdxUELRegisterDone(pgdx)

def gdxUELRegisterMap(pgdx, UMap, Uel):
    r"""gdxUELRegisterMap(pgdx, UMap, Uel) -> int"""
    return _gdxcc.gdxUELRegisterMap(pgdx, UMap, Uel)

def gdxUELRegisterMapStart(pgdx):
    r"""gdxUELRegisterMapStart(pgdx) -> int"""
    return _gdxcc.gdxUELRegisterMapStart(pgdx)

def gdxUELRegisterRaw(pgdx, Uel):
    r"""gdxUELRegisterRaw(pgdx, Uel) -> int"""
    return _gdxcc.gdxUELRegisterRaw(pgdx, Uel)

def gdxUELRegisterRawStart(pgdx):
    r"""gdxUELRegisterRawStart(pgdx) -> int"""
    return _gdxcc.gdxUELRegisterRawStart(pgdx)

def gdxUELRegisterStr(pgdx, Uel):
    r"""gdxUELRegisterStr(pgdx, Uel) -> int"""
    return _gdxcc.gdxUELRegisterStr(pgdx, Uel)

def gdxUELRegisterStrStart(pgdx):
    r"""gdxUELRegisterStrStart(pgdx) -> int"""
    return _gdxcc.gdxUELRegisterStrStart(pgdx)

def gdxUMFindUEL(pgdx, Uel):
    r"""gdxUMFindUEL(pgdx, Uel) -> int"""
    return _gdxcc.gdxUMFindUEL(pgdx, Uel)

def gdxUMUelGet(pgdx, UelNr):
    r"""gdxUMUelGet(pgdx, UelNr) -> int"""
    return _gdxcc.gdxUMUelGet(pgdx, UelNr)

def gdxUMUelInfo(pgdx):
    r"""gdxUMUelInfo(pgdx) -> int"""
    return _gdxcc.gdxUMUelInfo(pgdx)

def gdxGetDomainElements(pgdx, SyNr, DimPos, FilterNr, DP, Uptr):
    r"""gdxGetDomainElements(pgdx, SyNr, DimPos, FilterNr, DP, Uptr) -> int"""
    return _gdxcc.gdxGetDomainElements(pgdx, SyNr, DimPos, FilterNr, DP, Uptr)

def gdxCurrentDim(pgdx):
    r"""gdxCurrentDim(pgdx) -> int"""
    return _gdxcc.gdxCurrentDim(pgdx)

def gdxRenameUEL(pgdx, OldName, NewName):
    r"""gdxRenameUEL(pgdx, OldName, NewName) -> int"""
    return _gdxcc.gdxRenameUEL(pgdx, OldName, NewName)

def gdxStoreDomainSets(pgdx):
    r"""gdxStoreDomainSets(pgdx) -> int"""
    return _gdxcc.gdxStoreDomainSets(pgdx)

def gdxStoreDomainSetsSet(pgdx, x):
    r"""gdxStoreDomainSetsSet(pgdx, x)"""
    return _gdxcc.gdxStoreDomainSetsSet(pgdx, x)
GAMSVERSION = _gdxcc.GAMSVERSION

GAMSMAJOR = _gdxcc.GAMSMAJOR

GAMSMINOR = _gdxcc.GAMSMINOR

GAMSGOLD = _gdxcc.GAMSGOLD

GLOBAL_MAX_INDEX_DIM = _gdxcc.GLOBAL_MAX_INDEX_DIM

GLOBAL_UEL_IDENT_SIZE = _gdxcc.GLOBAL_UEL_IDENT_SIZE

ITERLIM_INFINITY = _gdxcc.ITERLIM_INFINITY

RESLIM_INFINITY = _gdxcc.RESLIM_INFINITY

GMS_MAX_SOLVERS = _gdxcc.GMS_MAX_SOLVERS

GMS_MAX_INDEX_DIM = _gdxcc.GMS_MAX_INDEX_DIM

GMS_UEL_IDENT_SIZE = _gdxcc.GMS_UEL_IDENT_SIZE

GMS_SSSIZE = _gdxcc.GMS_SSSIZE

GMS_VARTYPE_UNKNOWN = _gdxcc.GMS_VARTYPE_UNKNOWN

GMS_VARTYPE_BINARY = _gdxcc.GMS_VARTYPE_BINARY

GMS_VARTYPE_INTEGER = _gdxcc.GMS_VARTYPE_INTEGER

GMS_VARTYPE_POSITIVE = _gdxcc.GMS_VARTYPE_POSITIVE

GMS_VARTYPE_NEGATIVE = _gdxcc.GMS_VARTYPE_NEGATIVE

GMS_VARTYPE_FREE = _gdxcc.GMS_VARTYPE_FREE

GMS_VARTYPE_SOS1 = _gdxcc.GMS_VARTYPE_SOS1

GMS_VARTYPE_SOS2 = _gdxcc.GMS_VARTYPE_SOS2

GMS_VARTYPE_SEMICONT = _gdxcc.GMS_VARTYPE_SEMICONT

GMS_VARTYPE_SEMIINT = _gdxcc.GMS_VARTYPE_SEMIINT

GMS_VARTYPE_MAX = _gdxcc.GMS_VARTYPE_MAX

GMS_EQU_USERINFO_BASE = _gdxcc.GMS_EQU_USERINFO_BASE

GMS_EQUTYPE_E = _gdxcc.GMS_EQUTYPE_E

GMS_EQUTYPE_G = _gdxcc.GMS_EQUTYPE_G

GMS_EQUTYPE_L = _gdxcc.GMS_EQUTYPE_L

GMS_EQUTYPE_N = _gdxcc.GMS_EQUTYPE_N

GMS_EQUTYPE_X = _gdxcc.GMS_EQUTYPE_X

GMS_EQUTYPE_C = _gdxcc.GMS_EQUTYPE_C

GMS_EQUTYPE_B = _gdxcc.GMS_EQUTYPE_B

GMS_EQUTYPE_MAX = _gdxcc.GMS_EQUTYPE_MAX

GMS_EQUEOFFSET = _gdxcc.GMS_EQUEOFFSET

GMS_SETTYPE_DEFAULT = _gdxcc.GMS_SETTYPE_DEFAULT

GMS_SETTYPE_SINGLETON = _gdxcc.GMS_SETTYPE_SINGLETON

GMS_SETTYPE_MAX = _gdxcc.GMS_SETTYPE_MAX

GMS_VAL_LEVEL = _gdxcc.GMS_VAL_LEVEL

GMS_VAL_MARGINAL = _gdxcc.GMS_VAL_MARGINAL

GMS_VAL_LOWER = _gdxcc.GMS_VAL_LOWER

GMS_VAL_UPPER = _gdxcc.GMS_VAL_UPPER

GMS_VAL_SCALE = _gdxcc.GMS_VAL_SCALE

GMS_VAL_MAX = _gdxcc.GMS_VAL_MAX

sv_valund = _gdxcc.sv_valund

sv_valna = _gdxcc.sv_valna

sv_valpin = _gdxcc.sv_valpin

sv_valmin = _gdxcc.sv_valmin

sv_valeps = _gdxcc.sv_valeps

sv_normal = _gdxcc.sv_normal

sv_acronym = _gdxcc.sv_acronym

GMS_SVIDX_UNDEF = _gdxcc.GMS_SVIDX_UNDEF

GMS_SVIDX_NA = _gdxcc.GMS_SVIDX_NA

GMS_SVIDX_PINF = _gdxcc.GMS_SVIDX_PINF

GMS_SVIDX_MINF = _gdxcc.GMS_SVIDX_MINF

GMS_SVIDX_EPS = _gdxcc.GMS_SVIDX_EPS

GMS_SVIDX_NORMAL = _gdxcc.GMS_SVIDX_NORMAL

GMS_SVIDX_ACR = _gdxcc.GMS_SVIDX_ACR

GMS_SVIDX_MAX = _gdxcc.GMS_SVIDX_MAX

dt_set = _gdxcc.dt_set

dt_par = _gdxcc.dt_par

dt_var = _gdxcc.dt_var

dt_equ = _gdxcc.dt_equ

dt_alias = _gdxcc.dt_alias

GMS_DT_SET = _gdxcc.GMS_DT_SET

GMS_DT_PAR = _gdxcc.GMS_DT_PAR

GMS_DT_VAR = _gdxcc.GMS_DT_VAR

GMS_DT_EQU = _gdxcc.GMS_DT_EQU

GMS_DT_ALIAS = _gdxcc.GMS_DT_ALIAS

GMS_DT_MAX = _gdxcc.GMS_DT_MAX

GMS_SV_UNDEF = _gdxcc.GMS_SV_UNDEF

GMS_SV_NA = _gdxcc.GMS_SV_NA

GMS_SV_PINF = _gdxcc.GMS_SV_PINF

GMS_SV_MINF = _gdxcc.GMS_SV_MINF

GMS_SV_EPS = _gdxcc.GMS_SV_EPS

GMS_SV_ACR = _gdxcc.GMS_SV_ACR

GMS_SV_NAINT = _gdxcc.GMS_SV_NAINT

STAT_OK = _gdxcc.STAT_OK

STAT_NOPT = _gdxcc.STAT_NOPT

STAT_INFES = _gdxcc.STAT_INFES

STAT_UNBND = _gdxcc.STAT_UNBND

STAT_EVAL = _gdxcc.STAT_EVAL

STAT_UNKNW = _gdxcc.STAT_UNKNW

STAT_REDEF = _gdxcc.STAT_REDEF

STAT_DEPND = _gdxcc.STAT_DEPND

STAT_REDIR = _gdxcc.STAT_REDIR

STAT_MAX = _gdxcc.STAT_MAX

SS_MAX = _gdxcc.SS_MAX

MS_MAX = _gdxcc.MS_MAX


def gmsFixEquType(userInfo):
    r"""gmsFixEquType(userInfo) -> int"""
    return _gdxcc.gmsFixEquType(userInfo)

def gmsFixVarType(userInfo):
    r"""gmsFixVarType(userInfo) -> int"""
    return _gdxcc.gmsFixVarType(userInfo)

cvar = _gdxcc.cvar
gmsDefRecVar = cvar.gmsDefRecVar
gmsDefRecEqu = cvar.gmsDefRecEqu
rcStat = cvar.rcStat
solveStatusTxt = cvar.solveStatusTxt
modelStatusTxt = cvar.modelStatusTxt

