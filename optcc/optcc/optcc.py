# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_optcc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_optcc')
    _optcc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_optcc', [dirname(__file__)])
        except ImportError:
            import _optcc
            return _optcc
        try:
            _mod = imp.load_module('_optcc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _optcc = swig_import_helper()
    del swig_import_helper
else:
    import _optcc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

optDataNone = _optcc.optDataNone
optDataInteger = _optcc.optDataInteger
optDataDouble = _optcc.optDataDouble
optDataString = _optcc.optDataString
optDataStrList = _optcc.optDataStrList
optTypeInteger = _optcc.optTypeInteger
optTypeDouble = _optcc.optTypeDouble
optTypeString = _optcc.optTypeString
optTypeBoolean = _optcc.optTypeBoolean
optTypeEnumStr = _optcc.optTypeEnumStr
optTypeEnumInt = _optcc.optTypeEnumInt
optTypeMultiList = _optcc.optTypeMultiList
optTypeStrList = _optcc.optTypeStrList
optTypeMacro = _optcc.optTypeMacro
optTypeImmediate = _optcc.optTypeImmediate
optsubRequired = _optcc.optsubRequired
optsubNoValue = _optcc.optsubNoValue
optsubOptional = _optcc.optsubOptional
optsub2Values = _optcc.optsub2Values
optMsgInputEcho = _optcc.optMsgInputEcho
optMsgHelp = _optcc.optMsgHelp
optMsgDefineError = _optcc.optMsgDefineError
optMsgValueError = _optcc.optMsgValueError
optMsgValueWarning = _optcc.optMsgValueWarning
optMsgDeprecated = _optcc.optMsgDeprecated
optMsgFileEnter = _optcc.optMsgFileEnter
optMsgFileLeave = _optcc.optMsgFileLeave
optMsgTooManyMsgs = _optcc.optMsgTooManyMsgs
optMsgUserError = _optcc.optMsgUserError
optMapIndicator = _optcc.optMapIndicator
optMapDefinedVar = _optcc.optMapDefinedVar
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _optcc.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _optcc.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _optcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _optcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _optcc.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_optcc.intArray_frompointer)
    else:
        frompointer = _optcc.intArray_frompointer
intArray_swigregister = _optcc.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _optcc.intArray_frompointer(t)
intArray_frompointer = _optcc.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _optcc.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _optcc.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _optcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _optcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _optcc.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_optcc.doubleArray_frompointer)
    else:
        frompointer = _optcc.doubleArray_frompointer
doubleArray_swigregister = _optcc.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _optcc.doubleArray_frompointer(t)
doubleArray_frompointer = _optcc.doubleArray_frompointer


def new_intp():
    return _optcc.new_intp()
new_intp = _optcc.new_intp

def copy_intp(value):
    return _optcc.copy_intp(value)
copy_intp = _optcc.copy_intp

def delete_intp(obj):
    return _optcc.delete_intp(obj)
delete_intp = _optcc.delete_intp

def intp_assign(obj, value):
    return _optcc.intp_assign(obj, value)
intp_assign = _optcc.intp_assign

def intp_value(obj):
    return _optcc.intp_value(obj)
intp_value = _optcc.intp_value

def new_doublep():
    return _optcc.new_doublep()
new_doublep = _optcc.new_doublep

def copy_doublep(value):
    return _optcc.copy_doublep(value)
copy_doublep = _optcc.copy_doublep

def delete_doublep(obj):
    return _optcc.delete_doublep(obj)
delete_doublep = _optcc.delete_doublep

def doublep_assign(obj, value):
    return _optcc.doublep_assign(obj, value)
doublep_assign = _optcc.doublep_assign

def doublep_value(obj):
    return _optcc.doublep_value(obj)
doublep_value = _optcc.doublep_value

def new_optHandle_tp():
    return _optcc.new_optHandle_tp()
new_optHandle_tp = _optcc.new_optHandle_tp

def copy_optHandle_tp(value):
    return _optcc.copy_optHandle_tp(value)
copy_optHandle_tp = _optcc.copy_optHandle_tp

def delete_optHandle_tp(obj):
    return _optcc.delete_optHandle_tp(obj)
delete_optHandle_tp = _optcc.delete_optHandle_tp

def optHandle_tp_assign(obj, value):
    return _optcc.optHandle_tp_assign(obj, value)
optHandle_tp_assign = _optcc.optHandle_tp_assign

def optHandle_tp_value(obj):
    return _optcc.optHandle_tp_value(obj)
optHandle_tp_value = _optcc.optHandle_tp_value

def optHandleToPtr(popt):
    """optHandleToPtr(popt) -> void *"""
    return _optcc.optHandleToPtr(popt)

def ptrTooptHandle(vptr):
    """ptrTooptHandle(vptr) -> optHandle_t"""
    return _optcc.ptrTooptHandle(vptr)

def optGetReady(msgBufSize):
    """optGetReady(msgBufSize) -> int"""
    return _optcc.optGetReady(msgBufSize)

def optGetReadyD(dirName, msgBufSize):
    """optGetReadyD(dirName, msgBufSize) -> int"""
    return _optcc.optGetReadyD(dirName, msgBufSize)

def optGetReadyL(libName, msgBufSize):
    """optGetReadyL(libName, msgBufSize) -> int"""
    return _optcc.optGetReadyL(libName, msgBufSize)

def optCreate(popt, msgBufSize):
    """optCreate(popt, msgBufSize) -> int"""
    return _optcc.optCreate(popt, msgBufSize)

def optCreateD(popt, dirName, msgBufSize):
    """optCreateD(popt, dirName, msgBufSize) -> int"""
    return _optcc.optCreateD(popt, dirName, msgBufSize)

def optCreateL(popt, libName, msgBufSize):
    """optCreateL(popt, libName, msgBufSize) -> int"""
    return _optcc.optCreateL(popt, libName, msgBufSize)

def optFree(popt):
    """optFree(popt) -> int"""
    return _optcc.optFree(popt)

def optLibraryLoaded():
    """optLibraryLoaded() -> int"""
    return _optcc.optLibraryLoaded()

def optLibraryUnload():
    """optLibraryUnload() -> int"""
    return _optcc.optLibraryUnload()

def optGetScreenIndicator():
    """optGetScreenIndicator() -> int"""
    return _optcc.optGetScreenIndicator()

def optSetScreenIndicator(scrind):
    """optSetScreenIndicator(scrind)"""
    return _optcc.optSetScreenIndicator(scrind)

def optGetExceptionIndicator():
    """optGetExceptionIndicator() -> int"""
    return _optcc.optGetExceptionIndicator()

def optSetExceptionIndicator(excind):
    """optSetExceptionIndicator(excind)"""
    return _optcc.optSetExceptionIndicator(excind)

def optGetExitIndicator():
    """optGetExitIndicator() -> int"""
    return _optcc.optGetExitIndicator()

def optSetExitIndicator(extind):
    """optSetExitIndicator(extind)"""
    return _optcc.optSetExitIndicator(extind)

def optGetErrorCallback():
    """optGetErrorCallback() -> optErrorCallback_t"""
    return _optcc.optGetErrorCallback()

def optSetErrorCallback(func):
    """optSetErrorCallback(func)"""
    return _optcc.optSetErrorCallback(func)

def optGetAPIErrorCount():
    """optGetAPIErrorCount() -> int"""
    return _optcc.optGetAPIErrorCount()

def optSetAPIErrorCount(ecnt):
    """optSetAPIErrorCount(ecnt)"""
    return _optcc.optSetAPIErrorCount(ecnt)

def optErrorHandling(msg):
    """optErrorHandling(msg)"""
    return _optcc.optErrorHandling(msg)

def optReadDefinition(popt, fn):
    """optReadDefinition(popt, fn) -> int"""
    return _optcc.optReadDefinition(popt, fn)

def optReadDefinitionFromPChar(popt, p_mut):
    """optReadDefinitionFromPChar(popt, p_mut) -> int"""
    return _optcc.optReadDefinitionFromPChar(popt, p_mut)

def optReadParameterFile(popt, fn):
    """optReadParameterFile(popt, fn) -> int"""
    return _optcc.optReadParameterFile(popt, fn)

def optReadFromStr(popt, s):
    """optReadFromStr(popt, s)"""
    return _optcc.optReadFromStr(popt, s)

def optWriteParameterFile(popt, fn):
    """optWriteParameterFile(popt, fn) -> int"""
    return _optcc.optWriteParameterFile(popt, fn)

def optClearMessages(popt):
    """optClearMessages(popt)"""
    return _optcc.optClearMessages(popt)

def optAddMessage(popt, info):
    """optAddMessage(popt, info)"""
    return _optcc.optAddMessage(popt, info)

def optGetMessage(popt, NrMsg):
    """optGetMessage(popt, NrMsg)"""
    return _optcc.optGetMessage(popt, NrMsg)

def optResetAll(popt):
    """optResetAll(popt)"""
    return _optcc.optResetAll(popt)

def optResetAllRecent(popt):
    """optResetAllRecent(popt)"""
    return _optcc.optResetAllRecent(popt)

def optResetRecentChanges(popt):
    """optResetRecentChanges(popt)"""
    return _optcc.optResetRecentChanges(popt)

def optShowHelp(popt, AHlpID):
    """optShowHelp(popt, AHlpID)"""
    return _optcc.optShowHelp(popt, AHlpID)

def optResetNr(popt, ANr):
    """optResetNr(popt, ANr) -> int"""
    return _optcc.optResetNr(popt, ANr)

def optFindStr(popt, AName):
    """optFindStr(popt, AName) -> int"""
    return _optcc.optFindStr(popt, AName)

def optGetInfoNr(popt, ANr):
    """optGetInfoNr(popt, ANr) -> int"""
    return _optcc.optGetInfoNr(popt, ANr)

def optGetValuesNr(popt, ANr):
    """optGetValuesNr(popt, ANr) -> int"""
    return _optcc.optGetValuesNr(popt, ANr)

def optSetValuesNr(popt, ANr, AIVal, ADVal, ASVal):
    """optSetValuesNr(popt, ANr, AIVal, ADVal, ASVal) -> int"""
    return _optcc.optSetValuesNr(popt, ANr, AIVal, ADVal, ASVal)

def optSetValues2Nr(popt, ANr, AIVal, ADVal, ASVal):
    """optSetValues2Nr(popt, ANr, AIVal, ADVal, ASVal) -> int"""
    return _optcc.optSetValues2Nr(popt, ANr, AIVal, ADVal, ASVal)

def optVersion(popt):
    """optVersion(popt)"""
    return _optcc.optVersion(popt)

def optDefinitionFile(popt):
    """optDefinitionFile(popt)"""
    return _optcc.optDefinitionFile(popt)

def optGetFromAnyStrList(popt, idash):
    """optGetFromAnyStrList(popt, idash) -> int"""
    return _optcc.optGetFromAnyStrList(popt, idash)

def optGetFromListStr(popt, skey):
    """optGetFromListStr(popt, skey) -> int"""
    return _optcc.optGetFromListStr(popt, skey)

def optListCountStr(popt, skey):
    """optListCountStr(popt, skey) -> int"""
    return _optcc.optListCountStr(popt, skey)

def optReadFromListStr(popt, skey, iPos):
    """optReadFromListStr(popt, skey, iPos) -> int"""
    return _optcc.optReadFromListStr(popt, skey, iPos)

def optSynonymCount(popt):
    """optSynonymCount(popt) -> int"""
    return _optcc.optSynonymCount(popt)

def optGetSynonym(popt, NrSyn):
    """optGetSynonym(popt, NrSyn) -> int"""
    return _optcc.optGetSynonym(popt, NrSyn)

def optEchoSet(popt, AIVal):
    """optEchoSet(popt, AIVal)"""
    return _optcc.optEchoSet(popt, AIVal)

def optEOLOnlySet(popt, AIVal):
    """optEOLOnlySet(popt, AIVal) -> int"""
    return _optcc.optEOLOnlySet(popt, AIVal)

def optNoBoundsSet(popt, AIVal):
    """optNoBoundsSet(popt, AIVal)"""
    return _optcc.optNoBoundsSet(popt, AIVal)

def optErrorCount(popt):
    """optErrorCount(popt)"""
    return _optcc.optErrorCount(popt)

def optGetBoundsInt(popt, ANr):
    """optGetBoundsInt(popt, ANr) -> int"""
    return _optcc.optGetBoundsInt(popt, ANr)

def optGetBoundsDbl(popt, ANr):
    """optGetBoundsDbl(popt, ANr) -> int"""
    return _optcc.optGetBoundsDbl(popt, ANr)

def optGetDefaultStr(popt, ANr):
    """optGetDefaultStr(popt, ANr) -> int"""
    return _optcc.optGetDefaultStr(popt, ANr)

def optGetIntNr(popt, ANr):
    """optGetIntNr(popt, ANr) -> int"""
    return _optcc.optGetIntNr(popt, ANr)

def optGetInt2Nr(popt, ANr):
    """optGetInt2Nr(popt, ANr) -> int"""
    return _optcc.optGetInt2Nr(popt, ANr)

def optSetIntNr(popt, ANr, AIVal):
    """optSetIntNr(popt, ANr, AIVal) -> int"""
    return _optcc.optSetIntNr(popt, ANr, AIVal)

def optSetInt2Nr(popt, ANr, AIVal):
    """optSetInt2Nr(popt, ANr, AIVal) -> int"""
    return _optcc.optSetInt2Nr(popt, ANr, AIVal)

def optGetStrNr(popt, ANr):
    """optGetStrNr(popt, ANr) -> int"""
    return _optcc.optGetStrNr(popt, ANr)

def optGetOptHelpNr(popt, ANr):
    """optGetOptHelpNr(popt, ANr) -> int"""
    return _optcc.optGetOptHelpNr(popt, ANr)

def optGetEnumHelp(popt, ANr, AOrd):
    """optGetEnumHelp(popt, ANr, AOrd) -> int"""
    return _optcc.optGetEnumHelp(popt, ANr, AOrd)

def optGetEnumStrNr(popt, ANr):
    """optGetEnumStrNr(popt, ANr) -> int"""
    return _optcc.optGetEnumStrNr(popt, ANr)

def optGetEnumCount(popt, ANr):
    """optGetEnumCount(popt, ANr) -> int"""
    return _optcc.optGetEnumCount(popt, ANr)

def optGetEnumValue(popt, ANr, AOrd):
    """optGetEnumValue(popt, ANr, AOrd) -> int"""
    return _optcc.optGetEnumValue(popt, ANr, AOrd)

def optGetStr2Nr(popt, ANr):
    """optGetStr2Nr(popt, ANr) -> int"""
    return _optcc.optGetStr2Nr(popt, ANr)

def optSetStrNr(popt, ANr, ASVal):
    """optSetStrNr(popt, ANr, ASVal) -> int"""
    return _optcc.optSetStrNr(popt, ANr, ASVal)

def optSetStr2Nr(popt, ANr, ASVal):
    """optSetStr2Nr(popt, ANr, ASVal) -> int"""
    return _optcc.optSetStr2Nr(popt, ANr, ASVal)

def optGetDblNr(popt, ANr):
    """optGetDblNr(popt, ANr) -> int"""
    return _optcc.optGetDblNr(popt, ANr)

def optGetDbl2Nr(popt, ANr):
    """optGetDbl2Nr(popt, ANr) -> int"""
    return _optcc.optGetDbl2Nr(popt, ANr)

def optSetDblNr(popt, ANr, ADVal):
    """optSetDblNr(popt, ANr, ADVal) -> int"""
    return _optcc.optSetDblNr(popt, ANr, ADVal)

def optSetDbl2Nr(popt, ANr, ADVal):
    """optSetDbl2Nr(popt, ANr, ADVal) -> int"""
    return _optcc.optSetDbl2Nr(popt, ANr, ADVal)

def optGetValStr(popt, AName):
    """optGetValStr(popt, AName) -> int"""
    return _optcc.optGetValStr(popt, AName)

def optGetVal2Str(popt, AName):
    """optGetVal2Str(popt, AName) -> int"""
    return _optcc.optGetVal2Str(popt, AName)

def optGetNameNr(popt, ANr):
    """optGetNameNr(popt, ANr) -> int"""
    return _optcc.optGetNameNr(popt, ANr)

def optGetDefinedNr(popt, ANr):
    """optGetDefinedNr(popt, ANr) -> int"""
    return _optcc.optGetDefinedNr(popt, ANr)

def optGetHelpNr(popt, ANr):
    """optGetHelpNr(popt, ANr) -> int"""
    return _optcc.optGetHelpNr(popt, ANr)

def optGetGroupNr(popt, ANr):
    """optGetGroupNr(popt, ANr) -> int"""
    return _optcc.optGetGroupNr(popt, ANr)

def optGetGroupGrpNr(popt, AGroup):
    """optGetGroupGrpNr(popt, AGroup) -> int"""
    return _optcc.optGetGroupGrpNr(popt, AGroup)

def optGetOptGroupNr(popt, ANr):
    """optGetOptGroupNr(popt, ANr) -> int"""
    return _optcc.optGetOptGroupNr(popt, ANr)

def optGetDotOptNr(popt, ANr):
    """optGetDotOptNr(popt, ANr) -> int"""
    return _optcc.optGetDotOptNr(popt, ANr)

def optGetDotOptUel(popt, ANr, ADim):
    """optGetDotOptUel(popt, ANr, ADim) -> int"""
    return _optcc.optGetDotOptUel(popt, ANr, ADim)

def optGetVarEquMapNr(popt, maptype, ANr):
    """optGetVarEquMapNr(popt, maptype, ANr) -> int"""
    return _optcc.optGetVarEquMapNr(popt, maptype, ANr)

def optGetEquVarEquMapNr(popt, maptype, ANr, ADim):
    """optGetEquVarEquMapNr(popt, maptype, ANr, ADim) -> int"""
    return _optcc.optGetEquVarEquMapNr(popt, maptype, ANr, ADim)

def optGetVarVarEquMapNr(popt, maptype, ANr, ADim):
    """optGetVarVarEquMapNr(popt, maptype, ANr, ADim) -> int"""
    return _optcc.optGetVarVarEquMapNr(popt, maptype, ANr, ADim)

def optVarEquMapCount(popt, maptype):
    """optVarEquMapCount(popt, maptype) -> int"""
    return _optcc.optVarEquMapCount(popt, maptype)

def optGetIndicatorNr(popt, ANr):
    """optGetIndicatorNr(popt, ANr) -> int"""
    return _optcc.optGetIndicatorNr(popt, ANr)

def optGetEquIndicatorNr(popt, ANr, ADim):
    """optGetEquIndicatorNr(popt, ANr, ADim) -> int"""
    return _optcc.optGetEquIndicatorNr(popt, ANr, ADim)

def optGetVarIndicatorNr(popt, ANr, ADim):
    """optGetVarIndicatorNr(popt, ANr, ADim) -> int"""
    return _optcc.optGetVarIndicatorNr(popt, ANr, ADim)

def optIndicatorCount(popt):
    """optIndicatorCount(popt) -> int"""
    return _optcc.optIndicatorCount(popt)

def optDotOptCount(popt):
    """optDotOptCount(popt) -> int"""
    return _optcc.optDotOptCount(popt)

def optSetRefNr(popt, ANr, ARefNr):
    """optSetRefNr(popt, ANr, ARefNr) -> int"""
    return _optcc.optSetRefNr(popt, ANr, ARefNr)

def optSetRefNrStr(popt, AOpt, ARefNr):
    """optSetRefNrStr(popt, AOpt, ARefNr) -> int"""
    return _optcc.optSetRefNrStr(popt, AOpt, ARefNr)

def optGetConstName(popt, cgroup, cindex):
    """optGetConstName(popt, cgroup, cindex) -> int"""
    return _optcc.optGetConstName(popt, cgroup, cindex)

def optGetTypeName(popt, TNr):
    """optGetTypeName(popt, TNr) -> int"""
    return _optcc.optGetTypeName(popt, TNr)

def optLookUp(popt, AOpt):
    """optLookUp(popt, AOpt) -> int"""
    return _optcc.optLookUp(popt, AOpt)

def optReadFromPChar(popt, p_mut):
    """optReadFromPChar(popt, p_mut)"""
    return _optcc.optReadFromPChar(popt, p_mut)

def optReadFromCmdLine(popt, p_mut):
    """optReadFromCmdLine(popt, p_mut)"""
    return _optcc.optReadFromCmdLine(popt, p_mut)

def optGetNameOpt(popt, ASVal):
    """optGetNameOpt(popt, ASVal) -> int"""
    return _optcc.optGetNameOpt(popt, ASVal)

def optResetStr(popt, AName):
    """optResetStr(popt, AName) -> int"""
    return _optcc.optResetStr(popt, AName)

def optGetDefinedStr(popt, AName):
    """optGetDefinedStr(popt, AName) -> int"""
    return _optcc.optGetDefinedStr(popt, AName)

def optGetIntStr(popt, AName):
    """optGetIntStr(popt, AName) -> int"""
    return _optcc.optGetIntStr(popt, AName)

def optGetDblStr(popt, AName):
    """optGetDblStr(popt, AName) -> double"""
    return _optcc.optGetDblStr(popt, AName)

def optGetStrStr(popt, AName):
    """optGetStrStr(popt, AName) -> char *"""
    return _optcc.optGetStrStr(popt, AName)

def optSetIntStr(popt, AName, AIVal):
    """optSetIntStr(popt, AName, AIVal)"""
    return _optcc.optSetIntStr(popt, AName, AIVal)

def optSetDblStr(popt, AName, ADVal):
    """optSetDblStr(popt, AName, ADVal)"""
    return _optcc.optSetDblStr(popt, AName, ADVal)

def optSetStrStr(popt, AName, ASVal):
    """optSetStrStr(popt, AName, ASVal)"""
    return _optcc.optSetStrStr(popt, AName, ASVal)

def optCount(popt):
    """optCount(popt) -> int"""
    return _optcc.optCount(popt)

def optMessageCount(popt):
    """optMessageCount(popt) -> int"""
    return _optcc.optMessageCount(popt)

def optGroupCount(popt):
    """optGroupCount(popt) -> int"""
    return _optcc.optGroupCount(popt)

def optRecentEnabled(popt):
    """optRecentEnabled(popt) -> int"""
    return _optcc.optRecentEnabled(popt)

def optRecentEnabledSet(popt, x):
    """optRecentEnabledSet(popt, x)"""
    return _optcc.optRecentEnabledSet(popt, x)
GLOBAL_MAX_INDEX_DIM = _optcc.GLOBAL_MAX_INDEX_DIM
GLOBAL_UEL_IDENT_SIZE = _optcc.GLOBAL_UEL_IDENT_SIZE
ITERLIM_INFINITY = _optcc.ITERLIM_INFINITY
GMS_MAX_INDEX_DIM = _optcc.GMS_MAX_INDEX_DIM
GMS_UEL_IDENT_SIZE = _optcc.GMS_UEL_IDENT_SIZE
GMS_SSSIZE = _optcc.GMS_SSSIZE
GMS_VARTYPE_UNKNOWN = _optcc.GMS_VARTYPE_UNKNOWN
GMS_VARTYPE_BINARY = _optcc.GMS_VARTYPE_BINARY
GMS_VARTYPE_INTEGER = _optcc.GMS_VARTYPE_INTEGER
GMS_VARTYPE_POSITIVE = _optcc.GMS_VARTYPE_POSITIVE
GMS_VARTYPE_NEGATIVE = _optcc.GMS_VARTYPE_NEGATIVE
GMS_VARTYPE_FREE = _optcc.GMS_VARTYPE_FREE
GMS_VARTYPE_SOS1 = _optcc.GMS_VARTYPE_SOS1
GMS_VARTYPE_SOS2 = _optcc.GMS_VARTYPE_SOS2
GMS_VARTYPE_SEMICONT = _optcc.GMS_VARTYPE_SEMICONT
GMS_VARTYPE_SEMIINT = _optcc.GMS_VARTYPE_SEMIINT
GMS_VARTYPE_MAX = _optcc.GMS_VARTYPE_MAX
GMS_EQUTYPE_E = _optcc.GMS_EQUTYPE_E
GMS_EQUTYPE_G = _optcc.GMS_EQUTYPE_G
GMS_EQUTYPE_L = _optcc.GMS_EQUTYPE_L
GMS_EQUTYPE_N = _optcc.GMS_EQUTYPE_N
GMS_EQUTYPE_X = _optcc.GMS_EQUTYPE_X
GMS_EQUTYPE_C = _optcc.GMS_EQUTYPE_C
GMS_EQUTYPE_MAX = _optcc.GMS_EQUTYPE_MAX
GMS_VAL_LEVEL = _optcc.GMS_VAL_LEVEL
GMS_VAL_MARGINAL = _optcc.GMS_VAL_MARGINAL
GMS_VAL_LOWER = _optcc.GMS_VAL_LOWER
GMS_VAL_UPPER = _optcc.GMS_VAL_UPPER
GMS_VAL_SCALE = _optcc.GMS_VAL_SCALE
GMS_VAL_MAX = _optcc.GMS_VAL_MAX
sv_valund = _optcc.sv_valund
sv_valna = _optcc.sv_valna
sv_valpin = _optcc.sv_valpin
sv_valmin = _optcc.sv_valmin
sv_valeps = _optcc.sv_valeps
sv_normal = _optcc.sv_normal
sv_acronym = _optcc.sv_acronym
GMS_SVIDX_UNDEF = _optcc.GMS_SVIDX_UNDEF
GMS_SVIDX_NA = _optcc.GMS_SVIDX_NA
GMS_SVIDX_PINF = _optcc.GMS_SVIDX_PINF
GMS_SVIDX_MINF = _optcc.GMS_SVIDX_MINF
GMS_SVIDX_EPS = _optcc.GMS_SVIDX_EPS
GMS_SVIDX_NORMAL = _optcc.GMS_SVIDX_NORMAL
GMS_SVIDX_ACR = _optcc.GMS_SVIDX_ACR
GMS_SVIDX_MAX = _optcc.GMS_SVIDX_MAX
dt_set = _optcc.dt_set
dt_par = _optcc.dt_par
dt_var = _optcc.dt_var
dt_equ = _optcc.dt_equ
dt_alias = _optcc.dt_alias
GMS_DT_SET = _optcc.GMS_DT_SET
GMS_DT_PAR = _optcc.GMS_DT_PAR
GMS_DT_VAR = _optcc.GMS_DT_VAR
GMS_DT_EQU = _optcc.GMS_DT_EQU
GMS_DT_ALIAS = _optcc.GMS_DT_ALIAS
GMS_DT_MAX = _optcc.GMS_DT_MAX
GMS_SV_UNDEF = _optcc.GMS_SV_UNDEF
GMS_SV_NA = _optcc.GMS_SV_NA
GMS_SV_PINF = _optcc.GMS_SV_PINF
GMS_SV_MINF = _optcc.GMS_SV_MINF
GMS_SV_EPS = _optcc.GMS_SV_EPS
GMS_SV_ACR = _optcc.GMS_SV_ACR
GMS_SV_NAINT = _optcc.GMS_SV_NAINT
# This file is compatible with both classic and new-style classes.


